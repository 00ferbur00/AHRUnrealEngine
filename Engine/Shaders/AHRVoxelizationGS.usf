// @RyanTorant
#include "AHRCommon.usf"
#include "AHRVoxelizationCommon.usf"

float3 to_vlocal(float3 worldPos)
{
	// Let's get mad!
	// (x - a)/b		   : add + div
	// (x - a)*c , c = 1/b : add + mul
	// x*c + d, d = -a/b   : mad
	return worldPos*AHRVoxelizationCB.HalfInvSceneBounds + AHRVoxelizationCB.WorldToVoxelOffset;
}


[maxvertexcount(3)]
void Main(triangle FAHRVoxelizationVSOut input[3], inout TriangleStream<FAHRVoxelizationGSOut> OutputStream)
{
	FAHRVoxelizationGSOut output[3];

	// Convert the world position to voxel pos
	// The code after this needs the vertex to be in the [0,1] range to work correctly
	float3 lpos0 = to_vlocal(input[0].Position.xyz);
	float3 lpos1 = to_vlocal(input[1].Position.xyz);
	float3 lpos2 = to_vlocal(input[2].Position.xyz);

	// Cull the triangles that are completely out bounds
	if( lpos0.x <= 1 || lpos0.x >= 0 ||
		lpos0.y <= 1 || lpos0.y >= 0 ||
		lpos0.z <= 1 || lpos0.z >= 0 ||

		lpos1.x <= 1 || lpos1.x >= 0 ||
		lpos1.y <= 1 || lpos1.y >= 0 ||
		lpos1.z <= 1 || lpos1.z >= 0 ||

		lpos2.x <= 1 || lpos2.x >= 0 ||
		lpos2.y <= 1 || lpos2.y >= 0 ||
		lpos2.z <= 1 || lpos2.z >= 0)
	{
		
		output[0].wPos = input[0].Position;
		output[0].FactoryInterpolants = input[0].FactoryInterpolants;

		output[1].wPos = input[1].Position;
		output[1].FactoryInterpolants = input[1].FactoryInterpolants;
	
		output[2].wPos = input[2].Position;
		output[2].FactoryInterpolants = input[2].FactoryInterpolants;

		float3 edge0 = normalize(lpos1 - lpos0);
		float3 edge1 = normalize(lpos2 - lpos0);
		float3 normal = abs(cross(edge0, edge1));
		float dominantAxis = max(normal.x, max(normal.y, normal.z));

		// Project the triangle along the dominant axis. It just swizzles coordinates actually 
		if (dominantAxis == normal.x)
		{
			output[0].Position = float4(lpos0.zyx,1);
			output[1].Position = float4(lpos1.zyx,1);
			output[2].Position = float4(lpos2.zyx,1);
		}
		else if (dominantAxis == normal.y)
		{
			output[0].Position = float4(lpos0.xzy,1);
			output[1].Position = float4(lpos1.xzy,1);
			output[2].Position = float4(lpos2.xzy,1);
		}
		else
		{
			output[0].Position = float4(lpos0.xyz,1);
			output[1].Position = float4(lpos1.xyz,1);
			output[2].Position = float4(lpos2.xyz,1);
		}	

		// Evil parameter right here. Thought that it could help with performance, but it doesn't seem to do much.
		output[0].Position *= AHRVoxelizationCB.TriangleSizeMultiplier;
		output[1].Position *= AHRVoxelizationCB.TriangleSizeMultiplier;
		output[2].Position *= AHRVoxelizationCB.TriangleSizeMultiplier;

		OutputStream.Append(output[0]);
		OutputStream.Append(output[1]);
		OutputStream.Append(output[2]);

		OutputStream.RestartStrip();
	}
}