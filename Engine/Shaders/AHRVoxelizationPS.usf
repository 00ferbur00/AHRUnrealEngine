// @RyanTorant
#include "AHRCommon.usf"
#include "AHRVoxelizationCommon.usf"

RWByteAddressBuffer SceneVolume : register (u0);
RWByteAddressBuffer EmissiveVolume : register (u1);

float3 to_vlocal(float3 worldPos)
{
	// Let's get mad!
	// (x - a)/b		   : add + div
	// (x - a)*c , c = 1/b : add + mul
	// x*c + d, d = -a/b   : mad
	return worldPos*AHRVoxelizationCB.InvSceneBounds + AHRVoxelizationCB.WorldToVoxelOffset;
}

Texture2D<float> ShadowDepth0;
SamplerState pointSampler;

void Main(FAHRVoxelizationGSOut input)
{
	// Only voxelize if we are inside the bounds
	float3 local = to_vlocal(input.wPos);
	if( local.x > 0.99f || local.x < -0.99f ||
		local.y > 0.99f || local.y < -0.99f ||
		local.z > 0.99f || local.z < -0.99f)
	{
		discard;
	}
	else
	{
		uint3 vpos = floor((local*0.5 + 0.5)*AHRVoxelizationCB.SliceSize);
		uint vidx = vpos.y + vpos.x*AHRVoxelizationCB.SliceSize.y + vpos.z*AHRVoxelizationCB.SliceSize.y*AHRVoxelizationCB.SliceSize.x;

		uint bidx = vidx >> 5;// shifting right n bits on a uint is the same as dividing by 2^n
		uint offset = vidx - 32u * bidx;

		SceneVolume.InterlockedOr(bidx*4, 1 << offset);

		FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(input.FactoryInterpolants, input.Position);
		CalcMaterialParameters(MaterialParameters,input.Position,true,input.Position);

		float3 color = GetMaterialBaseColor(MaterialParameters);

		static const float ShadowEpsilon = 0.01f;

		// Add shadowing
		float4 lpos = fmul(input.wPos,AHRVoxelizationCB.ShadowMatrix0);
		lpos.xyz /= lpos.w;
		lpos.x = lpos.x*0.5 + 0.5;
		lpos.y = -lpos.y*0.5 + 0.5;
		lpos.xy *= AHRVoxelizationCB.ShadowViewportScaling0;

		color *= ShadowDepth0.SampleLevel(pointSampler,lpos.xy,0) >= lpos.z;//abs(lpos.z - ShadowDepth0.SampleLevel(pointSampler,lpos.xy,0))/(lpos.z) <= ShadowEpsilon;

		// Add emissive
		color += GetMaterialEmissive(MaterialParameters);

		//vpos = floor((local*0.5 + 0.5)*(AHRVoxelizationCB.SliceSize/2u));
		vpos /= 2u;
		vidx = vpos.y + vpos.x*(AHRVoxelizationCB.SliceSize.y/2u) + vpos.z*(AHRVoxelizationCB.SliceSize.y/2u)*(AHRVoxelizationCB.SliceSize.x/2u);
		EmissiveVolume.InterlockedMax(vidx*4u,encode_R9G9B9_EXP5(color));

		/*
		// Store emissive
		uint ebidx = vidx >> 2;
		uint eoffset = vidx - 4u * ebidx;
		eoffset *= 8u;
		uint emask = ~(B8(11111111) << eoffset);

		FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(input.FactoryInterpolants, input.Position);
		CalcMaterialParameters(MaterialParameters,input.Position,true,input.Position);

		uint idx = encode_R3G3B2(GetMaterialBaseColor(MaterialParameters) + GetMaterialEmissive(MaterialParameters));

		// This should be implemented with a CAS
		EmissiveVolume.InterlockedAnd(ebidx*4, emask); // mask 
		EmissiveVolume.InterlockedOr(ebidx*4, idx << eoffset);*/

		/*uint vox = EmissiveVolume.Load(ebidx*4);
		vox = (vox & emask) | (AHRVoxelizationCB.EmissiveIndex << eoffset);
		EmissiveVolume.Store(ebidx*4,vox);*/
	}
}