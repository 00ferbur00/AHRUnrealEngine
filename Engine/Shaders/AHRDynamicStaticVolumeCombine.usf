#include "AHRCommon.usf"

RWByteAddressBuffer DynamicVolume;
ByteAddressBuffer StaticVolume;

RWByteAddressBuffer DynamicEmissiveVolume;
ByteAddressBuffer StaticEmissiveVolume;

uint3 gridRes;

[numthreads(8, 8, 4)]
void mainBinary( uint3 DTid : SV_DispatchThreadID )
{
	uint idx = DTid.x + DTid.y*gridRes.x + DTid.z*gridRes.x*gridRes.y;

	DynamicVolume.InterlockedOr(idx*4,StaticVolume.Load(idx*4));
}

[numthreads(8, 8, 4)] // try to keep x*y*z = 256, at least on NVIDIA hardware
void mainEmissive( uint3 DTid : SV_DispatchThreadID )
{
	// Store only if the voxel wasn't empty
	uint idx = DTid.x + DTid.y*gridRes.x + DTid.z*gridRes.x*gridRes.y;

	uint vpacked = StaticEmissiveVolume.Load(idx*4);

	uint idx0 = vpacked & B32(00000000, 00000000, 00000000, 11111111);
	uint idx1 = vpacked & B32(00000000, 00000000, 11111111, 00000000);
	uint idx2 = vpacked & B32(00000000, 11111111, 00000000, 00000000);
	uint idx3 = vpacked & B32(11111111, 00000000, 00000000, 00000000);

	
	// Load the data from that Dynamic, as we only will change dynamic if the data from static is != 0
	uint final = DynamicEmissiveVolume.Load(idx*4);

	if(idx0 != 0) 
	{
		final &= B32(11111111, 11111111, 11111111, 00000000); // mask
		final |= idx0; // replace the masked part with the idx
	}
	if(idx1 != 0) 
	{
		final &= B32(11111111, 11111111, 00000000, 11111111);
		final |= idx1;
	}
	if(idx2 != 0) 
	{
		final &= B32(11111111, 00000000, 11111111, 11111111);
		final |= idx2;
	}
	if(idx3 != 0) 
	{
		final &= B32(00000000, 11111111, 11111111, 11111111);
		final |= idx3;
	}

	// Store
	DynamicEmissiveVolume.Store(idx*4,final);
}