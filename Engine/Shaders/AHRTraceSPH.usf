// @RyanTorant
#include "Common.usf"
#include "DeferredShadingCommon.usf"
#include "AHRCommon.usf"

float3 to_vlocal(float3 worldPos)
{
	// Let's get mad!
	// (x - a)/b		   : add + div
	// (x - a)*c , c = 1/b : add + mul
	// x*c + d, d = -a/b   : mad
	return worldPos*AHRTraceCB.HalfInvSceneBounds + AHRTraceCB.WorldToVoxelOffset;
}

ByteAddressBuffer SceneVolume;
ByteAddressBuffer EmissiveVolume;

Texture2D ObjNormal;
Texture2D<float4> SamplingKernel;

SamplerState samLinear;
SamplerState samPoint;

float4 main(float2 InUV : TEXCOORD0,float3 ScreenVector : TEXCOORD1) : SV_TARGET0
{
	float SceneDepth = CalcSceneDepth(InUV*2.0f);
	float3 wPos = ScreenVector * SceneDepth + View.ViewOrigin.xyz;
	float3 vlocalWPos = -to_vlocal(wPos);
	
	// Get direction
	uint2 DTid = InUV*AHRTraceCB.ScreenRes;
	//if(DTid.x % 2 + (DTid.y % 2)*2) discard;
	NumberGenerator rng;
	rng.SetSeed( wang_hash((AHRTraceCB.RayIndex+1)*(DTid.x%8 + (DTid.y%8)*8)));
	//rng.SetSeed( wang_hash(DTid.x + DTid.y*AHRTraceCB.ScreenRes );
	
	/*float3 step = normalize(float3( rand(InUV*(AHRTraceCB.RayIndex+1))*2-1,
									rand(InUV*10*(AHRTraceCB.RayIndex+1)+2)*2-1,
									rand(InUV*20*(AHRTraceCB.RayIndex+1)+5)*2-1));*/  //SamplingKernel.SampleLevel(samPoint,InUV*AHRTraceCB.SamplingKernelUVScaling,0).xyz;
	float3 step;
	step.x = rng.GetRandomFloat(-1,1);
	step.y = rng.GetRandomFloat(-1,1);
	step.z = 1;

	step.xy = normalize(step.xy)*rng.GetRandomFloat(0,1.732f); // 1.732f = tan(pi/3), limiting the cone to an aperture of 120 degrees (or a pi/3 half angle)
	step = normalize(step);

	step.x *= lerp(-1,1,DTid.x % 2);
	step.y *= lerp(-1,1,DTid.y % 2);


	// Generate tangent frame
	float3 normal = normalize(ObjNormal.SampleLevel(samLinear,InUV*2.0f,0).xyz*2 - 1);
	float3 tangent,bitangent;
	FindBestAxisVectors(normal ,tangent,bitangent);
	/*float3 tmpVec = normalize(float3( rand(InUV*(AHRTraceCB.RayIndex+48))*2-1,
									rand(InUV*15*(AHRTraceCB.RayIndex+1)+5)*2-1,
									rand(InUV*15*(AHRTraceCB.RayIndex+1)+5)*2-1));*/

	/*tangent = normalize(cross(tmpVec,normal));
	bitangent = normalize(cross(tangent,normal));*/


	/*tangent = normalize(tmpVec - normal * dot(tmpVec, normal));
	bitangent = normalize(cross(normal, tangent));*/

	// Cache variables
	uint bvox = -1;
	uint prevbidx = -1;

	// Generate the sampling pos
	step = normalize(step.x * bitangent + (step.y * tangent + (step.z * normal)));
	//float3x3 tTangentFrame = { bitangent, tangent, normal };

	
	//step = normalize(mul(step, tTangentFrame));
	//step = normalize(-reflect(-normalize(ScreenVector), normal));
	//step = normalize(-reflect(-normalize(ScreenVector), GetScreenSpaceData(InUV*2).GBuffer.WorldNormal));
	
	//float spec = pow(1.0f - saturate(dot(normal,normalize(-reflect(-normalize(ScreenVector), normal)))),20.0f)*10.0f;
	
	float angleCos = saturate(dot(step,normal));
	float dispAngleMult = sqrt(1 - angleCos*angleCos)/(angleCos + 0.01) + 1;

	//step = step*AHRTraceCB.VoxelScaleMult;
	float3 spos = wPos + step*AHRTraceCB.InitialDispMult*dispAngleMult;

	step *= AHRTraceCB.SamplesDispMultiplier;
	
	// Trace
	float4 color = 0;
	color.w = 1;

	for (uint i = 0; i < AHRTraceCB.DiffuseSamplesCount; i++)
	{
		float3 local = to_vlocal(spos);
		if( local.x > 1 || local.x < 0 ||
			local.y > 1 || local.y < 0 ||
			local.z > 1 || local.z < 0)
		{
			// Here we could intersect the ray with the sky sphere and take that color...
			color += float4(AHRTraceCB.LostRayColor,0);
			break;
		}

		uint3 vpos = floor(local*AHRTraceCB.SliceSize);
		uint vidx = vpos.y + vpos.x*AHRTraceCB.SliceSize.y + vpos.z*AHRTraceCB.SliceSize.y*AHRTraceCB.SliceSize.x;
		uint bidx = vidx >> 5u;// shifting right n bits on a uint is the same as dividing by 2^n
		uint offset = vidx - 32u * bidx;

		if(bidx != prevbidx)
		{
			bvox = SceneVolume.Load(bidx*4);
			prevbidx = bidx;
		}

		if(bvox & (1 << offset))
		{
			// Fake attenuation. Based on inverse squared falloff (pbr) but with a few tweaks
			float att = 1.0f/(dot(local+vlocalWPos,local+vlocalWPos)*2+1);

			vpos /= 2u;
			vidx = vpos.y + vpos.x*(AHRTraceCB.SliceSize.y/2u) + vpos.z*(AHRTraceCB.SliceSize.y/2u)*(AHRTraceCB.SliceSize.x/2u);
			color.rgb += decode_R9G9B9_EXP5(EmissiveVolume.Load(vidx*4u))*att; 
			color.w = 1 - att;
			break;
		}
		//float t = RANDOM_AM * wang_hash(i+ (AHRTraceCB.RayIndex+1)*(DTid.x%8 + (DTid.y%8)*8) );
		spos += step;//*lerp(0.25,4,t);
	}

	return color;
}