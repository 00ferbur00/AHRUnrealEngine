// @RyanTorant
#include "Common.usf"
#include "DeferredShadingCommon.usf"
#include "AHRCommon.usf"

void VS(
	in float2 InPosition : ATTRIBUTE0,
	in float2 InUV       : ATTRIBUTE1,
	out float2 OutTexCoord : TEXCOORD0,
	out float3 OutScreenVector : TEXCOORD1,
	out float4 OutPosition : SV_POSITION
	)
{	
	DrawRectangle(float4(InPosition.xy, 0, 1), InUV, OutPosition, OutTexCoord);
	OutScreenVector = mul(float4(OutPosition.xy, 1, 0), View.ScreenToTranslatedWorld).xyz;
}


Texture2D<float4> ObjNormal;
SamplerState samLinear;

Texture2D<float4> Trace0;
Texture2D<float4> Trace1;
Texture2D<float4> Trace2;
Texture2D<float4> Trace3;
Texture2D<float4> Trace4;
Texture2D<float4> Trace5;

Texture2D<float4> Kernel0;
Texture2D<float4> Kernel1;
Texture2D<float4> Kernel2;
Texture2D<float4> Kernel3;
Texture2D<float4> Kernel4;


float4 PS(float2 InUV : TEXCOORD0,float3 ScreenVector : TEXCOORD1) : SV_TARGET0
{
#if 0
	/*float SceneDepth = CalcSceneDepth(InUV);
	float3 WorldPosition = ScreenVector * SceneDepth + View.ViewOrigin.xyz;*/

	/*float3 fcolor = tGI.SampleLevel(samLinear,InUV,0);

	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(InUV);

	fcolor = fcolor*AHRCompositeCB.GIMultiplier*ScreenSpaceData.GBuffer.DiffuseColor;//pow(fcolor,AHRCompositeCB.GIMultiplier); 
	
	return float4(fcolor,1);*/


	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(InUV);

	uint2 res;
	tGI.GetDimensions(res.x,res.y);
	float4x4 sph = Decode4SPH(tGI[InUV*res]);

	float3 lnormal = normalize(ObjNormal.SampleLevel(samLinear,InUV,0))*2-1;
	float3 tangent = normalize(rkernel - lnormal * dot(rkernel, lnormal));
	float3 bitangent = cross(lnormal, tangent);

	float3 v0,v1,v2,v3;
	v0 = normalize(rayKernel[0].x * bitangent + (rayKernel[0].z * tangent + (rayKernel[0].y * lnormal)));
	v1 = normalize(rayKernel[1].x * bitangent + (rayKernel[1].z * tangent + (rayKernel[1].y * lnormal)));
	v2 = normalize(rayKernel[2].x * bitangent + (rayKernel[2].z * tangent + (rayKernel[2].y * lnormal)));
	v3 = normalize(rayKernel[3].x * bitangent + (rayKernel[3].z * tangent + (rayKernel[3].y * lnormal)));

	//float3 ivec = normalize(-reflect(-normalize(ScreenVector), ScreenSpaceData.GBuffer.WorldNormal));
	float3 ivec = ScreenSpaceData.GBuffer.WorldNormal;
	float4 coeffs = float4(pow(saturate(dot(ivec,v0)),1.6),
						   pow(saturate(dot(ivec,v1)),1.6),
						   pow(saturate(dot(ivec,v2)),1.6),
						   pow(saturate(dot(ivec,v3)),1.6) );

	float4 interp = sph[0] * coeffs.x +
					sph[1] * coeffs.y +
					sph[2] * coeffs.z +
					sph[3] * coeffs.w;
	//interp /= coeffs.x + coeffs.y + coeffs.z + coeffs.w;
	interp *= 0.25f;

	float3 fcolor = sph[0];//(sph[0]+sph[1]+sph[2]+sph[3]).rgb*0.25f;
	
	//float3 fcolor = interp*AHRCompositeCB.GIMultiplier*max(float3(0.085f,0.085f,0.085f),ScreenSpaceData.GBuffer.DiffuseColor);// + interp.w*0.1*max(float3(0.085f,0.085f,0.085f),ScreenSpaceData.GBuffer.DiffuseColor);
	
#endif
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(InUV);

	float3 fcolor = 0;
	float3 n = ScreenSpaceData.GBuffer.WorldNormal;
	float3 rdir = normalize(-reflect(-normalize(ScreenVector), n));

	float3 normal = normalize(ObjNormal.SampleLevel(samLinear,InUV,0).xyz*2 - 1);
	float3 tangent,bitangent;
	FindBestAxisVectors(normal ,tangent,bitangent);

	float4 c0 = Trace0.SampleLevel(samLinear,InUV,0);
	float4 c1 = Trace1.SampleLevel(samLinear,InUV,0);
	float4 c2 = Trace2.SampleLevel(samLinear,InUV,0);
	float4 c3 = Trace3.SampleLevel(samLinear,InUV,0);
	float4 c4 = Trace4.SampleLevel(samLinear,InUV,0);
	float4 c5 = Trace5.SampleLevel(samLinear,InUV,0); // perfect reflection (normal mapped)

	float3 r0 = Kernel0.SampleLevel(samLinear,InUV,0)*2-1;
	float3 r1 = Kernel0.SampleLevel(samLinear,InUV,0)*2-1;
	float3 r2 = Kernel0.SampleLevel(samLinear,InUV,0)*2-1;
	float3 r3 = Kernel0.SampleLevel(samLinear,InUV,0)*2-1;
	float3 r4 = Kernel0.SampleLevel(samLinear,InUV,0)*2-1;

	// Orientate
	r0 =  normalize(r0.x * bitangent + (r0.y * tangent + (r0.z * normal)));
	r1 =  normalize(r1.x * bitangent + (r1.y * tangent + (r1.z * normal)));
	r2 =  normalize(r2.x * bitangent + (r2.y * tangent + (r2.z * normal)));
	r3 =  normalize(r3.x * bitangent + (r3.y * tangent + (r3.z * normal)));
	r4 =  normalize(r4.x * bitangent + (r4.y * tangent + (r4.z * normal)));

	float4 diff = c0*pow(saturate(dot(r0,n)),3.5) + c1*pow(saturate(dot(r1,n)),3.5)  + c2*pow(saturate(dot(r2,n)),3.5)  + c3*pow(saturate(dot(r3,n)),3.5)  + c4*pow(saturate(dot(r4,n)),3.5) ;
	float3 spec = c0*pow(saturate(dot(r0,rdir)),3.5) + c1*pow(saturate(dot(r1,rdir)),3.5)  + c2*pow(saturate(dot(r2,rdir)),3.5)  + c3*pow(saturate(dot(r3,rdir)),3.5)  + c4*pow(saturate(dot(r4,rdir)),3.5) ;

	fcolor = diff + pow(spec,lerp(0.63f,3.5f,pow(ScreenSpaceData.GBuffer.Roughness,0.75f)))*1.75f + diff.w*0.075f;

	fcolor.rgb *= max(AHRCompositeCB.GIMultiplier*ScreenSpaceData.GBuffer.DiffuseColor,0.05f);


	return max(float4(fcolor.rgb,1),0); // prevent the shader from outputting negative lighting
}