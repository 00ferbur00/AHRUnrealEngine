// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DistanceFieldShadowing.usf
=============================================================================*/

#include "Common.usf"
#include "DeferredShadingCommon.usf"
#include "DistanceFieldLightingShared.usf"

RWTexture2D<float2> RWShadowFactors;

bool RayHitSphere( float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius )
{
	float3 ClosestPointOnRay = max( 0, dot( SphereCenter - RayOrigin, UnitRayDirection ) ) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot( CenterToRay, CenterToRay ) <= Square( SphereRadius );
}

float2 NumGroups;
float3 LightDirection;

/** Min and Max depth for this tile. */
groupshared uint IntegerTileMinZ;
groupshared uint IntegerTileMaxZ;

/** Inner Min and Max depth for this tile. */
groupshared uint IntegerTileMinZ2;
groupshared uint IntegerTileMaxZ2;

/** Number of objects affecting the tile, after culling. */
groupshared uint TileNumObjects0;
groupshared uint TileNumObjects1;

#define MAX_INTERSECTING_OBJECTS 256
groupshared uint IntersectingObjectIndices[MAX_INTERSECTING_OBJECTS * 2];

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void DistanceFieldShadowingCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
	uint ThreadIndex = GroupThreadId.y * THREADGROUP_SIZEX + GroupThreadId.x;

	float2 ScreenUV = float2((DispatchThreadId.xy * DOWNSAMPLE_FACTOR + View.ViewRectMin.xy + .5f) * View.ViewSizeAndSceneTexelSize.zw);
	float2 ScreenPosition = (ScreenUV.xy - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;

	float SceneDepth = CalcSceneDepth(ScreenUV);

	//@todo - handle invalid tile depth ranges due to MinDepth
	float MinDepth = 0;

	// Initialize per-tile variables
    if (ThreadIndex == 0) 
	{
        IntegerTileMinZ = 0x7F7FFFFF;     
        IntegerTileMaxZ = 0;
		IntegerTileMinZ2 = 0x7F7FFFFF;  
		IntegerTileMaxZ2 = 0;
		TileNumObjects0 = 0;
		TileNumObjects1 = 0;
    }

    GroupMemoryBarrierWithGroupSync();
    
	if (SceneDepth > MinDepth)
	{
		// Use shared memory atomics to build the depth bounds for this tile
		// Each thread is assigned to a pixel at this point
		//@todo - move depth range computation to a central point where it can be reused by all the frame's tiled deferred passes!
		InterlockedMin(IntegerTileMinZ, asuint(SceneDepth));
		InterlockedMax(IntegerTileMaxZ, asuint(SceneDepth));
	}

    GroupMemoryBarrierWithGroupSync();

    float MinTileZ = asfloat(IntegerTileMinZ);
    float MaxTileZ = asfloat(IntegerTileMaxZ);

	float HalfZ = .5f * (MinTileZ + MaxTileZ);

	// Compute a second min and max Z, clipped by HalfZ, so that we get two depth bounds per tile
	// This results in more conservative tile depth bounds and fewer intersections
	if (SceneDepth >= HalfZ && SceneDepth > MinDepth)
	{
		InterlockedMin(IntegerTileMinZ2, asuint(SceneDepth));
	}

	if (SceneDepth <= HalfZ && SceneDepth > MinDepth)
	{
		InterlockedMax(IntegerTileMaxZ2, asuint(SceneDepth));
	}

	GroupMemoryBarrierWithGroupSync();
	
	float MinTileZ2 = asfloat(IntegerTileMinZ2);
	float MaxTileZ2 = asfloat(IntegerTileMaxZ2);

	float3 ViewTileMin;
	float3 ViewTileMax;

	float3 ViewTileMin2;
	float3 ViewTileMax2;

	float ExpandRadius = 0;

	float2 TanViewFOV = float2(1 / View.ViewToClip[0][0], 1 / View.ViewToClip[1][1]);
	float2 TileSize = TanViewFOV * 2 / NumGroups;
	float2 UnitPlaneTileMin = (GroupId.xy * TileSize - TanViewFOV) * float2(1, -1);
	float2 UnitPlaneTileMax = ((GroupId.xy + 1) * TileSize - TanViewFOV) * float2(1, -1);

	ViewTileMin.xy = min(MinTileZ * UnitPlaneTileMin, MaxTileZ2 * UnitPlaneTileMin) - ExpandRadius;
	ViewTileMax.xy = max(MinTileZ * UnitPlaneTileMax, MaxTileZ2 * UnitPlaneTileMax) + ExpandRadius;
	ViewTileMin.z = MinTileZ - ExpandRadius;
	ViewTileMax.z = MaxTileZ2 + ExpandRadius;
	ViewTileMin2.xy = min(MinTileZ2 * UnitPlaneTileMin, MaxTileZ * UnitPlaneTileMin) - ExpandRadius;
	ViewTileMax2.xy = max(MinTileZ2 * UnitPlaneTileMax, MaxTileZ * UnitPlaneTileMax) + ExpandRadius;
	ViewTileMin2.z = MinTileZ2 - ExpandRadius;
	ViewTileMax2.z = MaxTileZ + ExpandRadius;

	float3 ViewGroup0Center = (ViewTileMax + ViewTileMin) / 2;
	float3 WorldGroup0Center = mul(float4(ViewGroup0Center, 1), View.ViewToTranslatedWorld).xyz - View.PreViewTranslation;
	float Group0BoundingRadius = length(ViewGroup0Center - ViewTileMax);

	float3 ViewGroup1Center = (ViewTileMax2 + ViewTileMin2) / 2;
	float3 WorldGroup1Center = mul(float4(ViewGroup1Center, 1), View.ViewToTranslatedWorld).xyz - View.PreViewTranslation;
	float Group1BoundingRadius = length(ViewGroup1Center - ViewTileMax2);

	// Compute per-tile lists of affecting objects through bounds culling
	// Each thread now operates on a sample instead of a pixel
	LOOP
	for (uint ObjectIndex = ThreadIndex; ObjectIndex < NumObjects; ObjectIndex += THREADGROUP_TOTALSIZE)
	{
		float4 SphereCenterAndRadius = LoadObjectPositionAndRadius(ObjectIndex);

		BRANCH
		if (RayHitSphere(WorldGroup0Center, -LightDirection, SphereCenterAndRadius.xyz, SphereCenterAndRadius.w + Group0BoundingRadius))
		{
			uint ListIndex;
			InterlockedAdd(TileNumObjects0, 1U, ListIndex);
			// Don't overwrite on overflow
			ListIndex = min(ListIndex, MAX_INTERSECTING_OBJECTS - 1);
			IntersectingObjectIndices[MAX_INTERSECTING_OBJECTS * 0 + ListIndex] = ObjectIndex; 
		}

		BRANCH
		if (RayHitSphere(WorldGroup1Center, -LightDirection, SphereCenterAndRadius.xyz, SphereCenterAndRadius.w + Group1BoundingRadius))
		{
			uint ListIndex;
			InterlockedAdd(TileNumObjects1, 1U, ListIndex);
			// Don't write out of bounds on overflow
			ListIndex = min(ListIndex, MAX_INTERSECTING_OBJECTS - 1);
			IntersectingObjectIndices[MAX_INTERSECTING_OBJECTS * 1 + ListIndex] = ObjectIndex; 
		}
	}

	GroupMemoryBarrierWithGroupSync();

	uint GroupIndex = SceneDepth > MaxTileZ2 ? 1 : 0;
	uint NumIntersectingObjects = GroupIndex == 0 ? TileNumObjects0 : TileNumObjects1;
	
	float Result = 0;

#define COMPUTE_SHADOWING 1
#if COMPUTE_SHADOWING
	BRANCH
	if (SceneDepth > MinDepth)
	{
		FGBufferData GBufferData = GetGBufferData(ScreenUV);
		float3 WorldNormal = GBufferData.WorldNormal;

		//@todo - expose
		float SunAngle = 2 * PI / 180.0f;

		BRANCH
		if (dot(WorldNormal, -LightDirection) > cos(PI / 2 + SunAngle))
		{
			float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * SceneDepth, SceneDepth, 1), View.ScreenToWorld);
			float3 OpaqueWorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

			float TraceDistance = 10000;
			float RayStartOffset = 2;
			float3 WorldRayStart = OpaqueWorldPosition - LightDirection * RayStartOffset;
			float3 WorldRayEnd = OpaqueWorldPosition - LightDirection * TraceDistance;
			float3 WorldRayDirection = WorldRayEnd - WorldRayStart;
			float3 UnitWorldRayDirection = normalize(WorldRayDirection);

			float TanSunAngle = tan(SunAngle);
			float MinRayTime = TraceDistance;
			float ClosestDistanceToIntersection = 1000;
			float TotalStepsTaken = 0;
			float MinConeVisibility = 1;

			LOOP
			for (uint ListObjectIndex = 0; ListObjectIndex < NumIntersectingObjects && MinRayTime >= TraceDistance; ListObjectIndex++)
			{
				uint ObjectIndex = IntersectingObjectIndices[MAX_INTERSECTING_OBJECTS * GroupIndex + ListObjectIndex];
				float3 LocalPositionExtent = LoadObjectLocalPositionExtent(ObjectIndex);
				float4x4 WorldToVolume = LoadObjectWorldToVolume(ObjectIndex);
				float4 UVScaleAndVolumeScale = LoadObjectUVScale(ObjectIndex);
				float3 UVAdd = LoadObjectUVAdd(ObjectIndex);

				float3 VolumeRayStart = mul(float4(WorldRayStart, 1), WorldToVolume).xyz;
				float3 VolumeRayEnd = mul(float4(WorldRayEnd, 1), WorldToVolume).xyz;
				float3 VolumeRayDirection = VolumeRayEnd - VolumeRayStart;
				float VolumeRayLength = length(VolumeRayDirection);
				VolumeRayDirection /= VolumeRayLength;

				float2 IntersectionTimes = LineBoxIntersect(VolumeRayStart, VolumeRayEnd, -LocalPositionExtent, LocalPositionExtent);

				if (IntersectionTimes.x < IntersectionTimes.y && IntersectionTimes.x < 1)
				{
					float SampleRayTime = IntersectionTimes.x * VolumeRayLength;
					uint MaxSteps = 64;
					float MinStepSize = 1.0f / (4 * MaxSteps);

					float MinDistance = 1000000;
					float3 IntersectionPosition = float3(0, 0, 0);

					uint StepIndex = 0;

					LOOP
					for (; StepIndex < MaxSteps; StepIndex++)
					{
						float3 SampleVolumePosition = VolumeRayStart + VolumeRayDirection * SampleRayTime;
						float3 ClampedSamplePosition = clamp(SampleVolumePosition, -LocalPositionExtent, LocalPositionExtent);
						float3 VolumeUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);
						float DistanceField = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, VolumeUV, 0).x;

						MinDistance = min(MinDistance, DistanceField);
						float SphereRadius = TanSunAngle * SampleRayTime;

						MinConeVisibility = min(MinConeVisibility, saturate(DistanceField / SphereRadius));
						IntersectionPosition = SampleVolumePosition;

						float StepDistance = max(DistanceField, MinStepSize);
						SampleRayTime += StepDistance;

						// Terminate the trace if we reached a negative area or went past the end of the ray
						if (DistanceField < 0 
							|| SampleRayTime > IntersectionTimes.y * VolumeRayLength)
						{
							break;
						}
					}

					if (MinDistance * UVScaleAndVolumeScale.w < 0 || StepIndex == MaxSteps)
					{
						MinRayTime = min(MinRayTime, SampleRayTime * UVScaleAndVolumeScale.w);
					}

					if (SampleRayTime * UVScaleAndVolumeScale.w > 100)
					{
						ClosestDistanceToIntersection = min(ClosestDistanceToIntersection, MinDistance * UVScaleAndVolumeScale.w);
					}
					TotalStepsTaken += StepIndex;
				}
			}

			Result = MinConeVisibility;
		}
	}

#else
	Result = .0001f * NumIntersectingObjects;
#endif

	//Result = (GroupIndex == 0 ? Group0BoundingRadius : Group1BoundingRadius) / 1000.0f;
	//Result = TotalStepsTaken / 1000.0f;
	//Result = NumIntersectingObjects / 100.0f;

	RWShadowFactors[DispatchThreadId.xy] = float2(Result, SceneDepth);
}

Texture2D ShadowFactorsTexture;
SamplerState ShadowFactorsSampler;

void DistanceFieldShadowingUpsamplePS(
	in float4 UVAndScreenPos : TEXCOORD0,
	in float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0)
{
	// Distance field AO was computed at 0,0 regardless of viewrect min
	float2 DistanceFieldUVs = UVAndScreenPos.xy - View.ViewRectMin.xy * View.ViewSizeAndSceneTexelSize.zw;

#define BILATERAL_UPSAMPLE 1
#if BILATERAL_UPSAMPLE
	float2 LowResBufferSize = floor(View.RenderTargetSize / DOWNSAMPLE_FACTOR);
	float2 LowResTexelSize = 1.0f / LowResBufferSize;
	float2 Corner00UV = floor(DistanceFieldUVs * LowResBufferSize - .5f) / LowResBufferSize + .5f * LowResTexelSize;
	float2 BilinearWeights = (DistanceFieldUVs - Corner00UV) * LowResBufferSize;

	float2 TextureValues00 = Texture2DSampleLevel(ShadowFactorsTexture, ShadowFactorsSampler, Corner00UV, 0).xy;
	float2 TextureValues10 = Texture2DSampleLevel(ShadowFactorsTexture, ShadowFactorsSampler, Corner00UV + float2(LowResTexelSize.x, 0), 0).xy;
	float2 TextureValues01 = Texture2DSampleLevel(ShadowFactorsTexture, ShadowFactorsSampler, Corner00UV + float2(0, LowResTexelSize.y), 0).xy;
	float2 TextureValues11 = Texture2DSampleLevel(ShadowFactorsTexture, ShadowFactorsSampler, Corner00UV + LowResTexelSize, 0).xy;

	float4 CornerWeights = float4(
		(1 - BilinearWeights.y) * (1 - BilinearWeights.x), 
		(1 - BilinearWeights.y) * BilinearWeights.x,
		BilinearWeights.y * (1 - BilinearWeights.x),
		BilinearWeights.y * BilinearWeights.x);

	float Epsilon = .0001f;

	float4 CornerDepths = abs(float4(TextureValues00.y, TextureValues10.y, TextureValues01.y, TextureValues11.y));
	float SceneDepth = CalcSceneDepth(UVAndScreenPos.xy);
	float4 DepthWeights = 1.0f / (abs(CornerDepths - SceneDepth.xxxx) + Epsilon);
	float4 FinalWeights = CornerWeights * DepthWeights;

	float InterpolatedResult = 
		(FinalWeights.x * TextureValues00.x 
		+ FinalWeights.y * TextureValues10.x
		+ FinalWeights.z * TextureValues01.x 
		+ FinalWeights.w * TextureValues11.x)
		/ dot(FinalWeights, 1);

	float Output = InterpolatedResult;

#else
	float Output = Texture2DSampleLevel(ShadowFactorsTexture, ShadowFactorsSampler, DistanceFieldUVs, 0).x;
#endif

	OutColor = EncodeLightAttenuation(half4(Output, Output, Output, Output));
}