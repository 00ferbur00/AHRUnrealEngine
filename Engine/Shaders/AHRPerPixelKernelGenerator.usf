#include "AHRCommon.usf"

RWTexture2D<float4> kernelTex;
uint RayIndex;

[numthreads(16, 16, 1)]
void tracingKernel(uint3 DTid : SV_DispatchThreadID)
{
	NumberGenerator rng;
	rng.SetSeed(wang_hash(RayIndex*(DTid.x%8 + (DTid.y%8)*8)));

	float3 step;
	step.x = rng.GetRandomFloat(-1,1);
	step.y = rng.GetRandomFloat(-1,1);
	step.z = 1;
	
	step.xy = normalize(step.xy)*rng.GetRandomFloat(0,1.732f); // 1.732f = tan(pi/3), limiting the cone to an aperture of 120 degrees (or a pi/3 half angle)
	step = normalize(step);
	
	if(RayIndex == 2)
	{
		step.x *= -1;
	}
	else if(RayIndex == 3)
	{
		step.y *= -1;
	}
	else if(RayIndex == 4)
	{
		step.x *= -1;
		step.y *= -1;
	}
	else if(RayIndex == 5)
	{
		step.x *= DTid.x % 2 ? -1 : 1;
		step.y *= DTid.y % 2 ? -1 : 1;
	}

	kernelTex[DTid.xy] = float4(step*0.5+0.5,1.0f);
}

Texture2D<float4> traceKernelTex;

[numthreads(16, 16, 1)]
void interpKernel_H(uint3 DTid : SV_DispatchThreadID)
{
	float3 fdir = 0;

	fdir += traceKernelTex[DTid.xy + uint2(-5,0)]*0.45f;
	fdir += traceKernelTex[DTid.xy + uint2(-4,0)]*0.5f;
	fdir += traceKernelTex[DTid.xy + uint2(-3,0)]*0.65f;
	fdir += traceKernelTex[DTid.xy + uint2(-2,0)]*0.8f;
	fdir += traceKernelTex[DTid.xy + uint2(-1,0)]*0.9f;
	fdir += traceKernelTex[DTid.xy              ];
	fdir += traceKernelTex[DTid.xy + uint2( 1,0)]*0.9f;
	fdir += traceKernelTex[DTid.xy + uint2( 2,0)]*0.8f;
	fdir += traceKernelTex[DTid.xy + uint2( 3,0)]*0.65f;
	fdir += traceKernelTex[DTid.xy + uint2( 4,0)]*0.5f;
	fdir += traceKernelTex[DTid.xy + uint2( 5,0)]*0.45f;

	kernelTex[DTid.xy] = float4(normalize(fdir)*0.5+0.5,1.0f);
}

[numthreads(16, 16, 1)]
void interpKernel_V(uint3 DTid : SV_DispatchThreadID)
{
	float3 fdir = 0;

	fdir += traceKernelTex[DTid.xy + uint2(0,-5)]*0.45f;
	fdir += traceKernelTex[DTid.xy + uint2(0,-4)]*0.5f;
	fdir += traceKernelTex[DTid.xy + uint2(0,-3)]*0.65f;
	fdir += traceKernelTex[DTid.xy + uint2(0,-2)]*0.8f;
	fdir += traceKernelTex[DTid.xy + uint2(0,-1)]*0.9f;
	fdir += traceKernelTex[DTid.xy              ];
	fdir += traceKernelTex[DTid.xy + uint2(0,1)]*0.9f;
	fdir += traceKernelTex[DTid.xy + uint2(0,2)]*0.8f;
	fdir += traceKernelTex[DTid.xy + uint2(0,3)]*0.65f;
	fdir += traceKernelTex[DTid.xy + uint2(0,4)]*0.5f;
	fdir += traceKernelTex[DTid.xy + uint2(0,5)]*0.45f;

	kernelTex[DTid.xy] = float4(normalize(fdir)*0.5+0.5,1.0f);
}