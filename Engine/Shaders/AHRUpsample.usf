// @RyanTorant
#include "Common.usf"
#include "DeferredShadingCommon.usf"

Texture2D<float4> tGI;
SamplerState samLinear;
float size;

static const float g_epsilon = 0.0001;

float4 PS(float2 InUV : TEXCOORD0,float3 ScreenVector : TEXCOORD1) : SV_TARGET0
{
	float SceneDepth = CalcSceneDepth(InUV)*0.0001f;
	//float3 WorldPosition = ScreenVector * SceneDepth + View.ViewOrigin.xyz;
	//float3 depth_hires = distanceSquared(SceneDepth,View.ViewOrigin.xyz);

	const float2 coords[9] =
	{
		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(-size,size),
		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(0.0f, size),
		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(size, size),

		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(-size, 0.0f),
		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(0.0f, 0.0f),
		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(size, 0.0f),

		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(-size, -size),
		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(0.0f, -size),
		InUV + View.ViewSizeAndSceneTexelSize.zw*float2(size, -size),
	};

	float4 gidata = 0;
	float weight_sum = 0;
	float3 normal = GetScreenSpaceData(InUV).GBuffer.WorldNormal;

	[unroll]
	for (int i = 0; i < 9; i++) 
	{
		float z = CalcSceneDepth(coords[i])*0.0001f;
		float3 n = GetScreenSpaceData(coords[i]).GBuffer.WorldNormal;
		//float3 wp = ScreenVector * z + View.ViewOrigin.xyz;
		//float3 linearZ = distanceSquared(SceneDepth,View.ViewOrigin.xyz);


		float w = 1.0f / (g_epsilon + abs(SceneDepth - z));
		w *= 1.0f / (g_epsilon + 1 - abs(dot(n,normal)));

		gidata += tGI.SampleLevel(samLinear, coords[i],0)*w;
		weight_sum += w;
	}
	gidata /= weight_sum;

	return gidata;
}